<html window-frame="transparent"
      window-width=400dip
      window-height=400dip>
    <head>
<style> 
          html { 
            background:transparent;
          }

          body {
            margin: 24px;
            aspect: CallBubble(background-color:gold, 
                      border-radius:10px,
                      shadow-color: rgba(0,0,20,0.7),
                      attachment: bottom-center );

          }

          button {
            display:block;
            margin:* * 2px *;
          }

        </style>
        <script>

function CallBubble(params)
{
    const rad = this.state.pixelsIn(params["border-radius"]) || 3;
    const back = params["background-color"] || "#fff";
    const shadow = params["shadow-color"] || "#0007";
    const attachment = params["attachment"] || "bottom-center";

    const generateShape = () => {

      let [x,y,w,h] = this.state.box("xywh","inner");

      let top     = printf(" L %d %d", w - rad, 0);
      let right   = printf(" L %d %d", w, h - rad);
      let bottom  = printf(" L %d %d", rad, h);
      let left    = "";

      let hc;

      switch(attachment) {
        case "bottom-left": hc = 3*rad;     top = printf(" L %d %d L %d %d L %d %d L %d %d", hc-rad, 0, hc,-rad,hc+rad,0, w-rad, 0); break;
        case "bottom-right": hc = w-3*rad;  top = printf(" L %d %d L %d %d L %d %d L %d %d", hc-rad, 0, hc, -rad, hc+rad, 0, w-rad, 0); break;
        case "bottom-center": hc = w/2;     top = printf(" L %d %d L %d %d L %d %d L %d %d", hc-rad, 0, hc,-rad,hc+rad,0, w-rad, 0); break;

        case "right-top":     hc = 2*rad;   left = printf(" L %d %d L %d %d L %d %d", 0, hc+rad,-rad,hc,0,rad); break;
        case "right-bottom":  hc = h-2*rad; left = printf(" L %d %d L %d %d L %d %d", -rad,hc,0,hc-rad,0,rad); break;
        case "right-middle":  hc = h/2;     left = printf(" L %d %d L %d %d L %d %d L %d %d", 0, hc+rad,-rad,hc,0,hc-rad,0,rad); break;

        case "top-right":  hc = w-3*rad;    bottom = printf(" L %d %d L %d %d L %d %d L %d %d", hc+rad, h, hc, h+rad, hc-rad, h, rad, h); break;
        case "top-left":   hc = 3*rad;      bottom = printf(" L %d %d L %d %d L %d %d L %d %d", hc+rad, h, hc, h+rad, hc-rad, h, rad, h); break;
        case "top-center": hc = w/2;        bottom = printf(" L %d %d L %d %d L %d %d L %d %d", hc+rad,h, hc,h+rad, hc-rad,h, rad, h); break;

        case "left-top":     hc = 2*rad;    right = printf(" L %d %d L %d %d L %d %d", w+rad, hc,w,hc+rad,w,h-rad); break;
        case "left-bottom":  hc = h-2*rad;  right = printf(" L %d %d L %d %d L %d %d", w,hc-rad,w+rad,hc,w,h-rad); break;
        case "left-middle":  hc = h/2;      right = printf(" L %d %d L %d %d L %d %d L %d %d", w, hc-rad,w+rad,hc,w,hc+rad,w,h-rad); break;
      }        

      return new Graphics.Path(
          printf("M 0 %d", rad)
        + printf(" A %d %d 0 0 1 %d 0", rad, rad, rad)
        + top
        + printf(" A %d %d 0 0 1 %d %d", rad, rad, w, rad)
        + right
        + printf(" A %d %d 0 0 1 %d %d", rad, rad, w-rad, h)
        + bottom
        + printf(" A %d %d 0 0 1 0 %d", rad, rad, h-rad)
        + left
        + " Z");
   };

   this.paintBackground = (gfx) => {
     let path = generateShape();
     gfx.fillStyle = back;
     gfx.pushLayer("margin-box", printf("drop-shadow(2px,2px,10px,%s)",shadow));
      gfx.draw(path, {fill:true});
     gfx.popLayer();
   }
}

Window.this.on("activate", evt => {
 console.log("activate", evt.reason);
 if(!evt.reason)
   Window.this.close();
});


        </script>
    </head>
    <body tab-index=0>

<button>Foo</button>

    </body>
</html>