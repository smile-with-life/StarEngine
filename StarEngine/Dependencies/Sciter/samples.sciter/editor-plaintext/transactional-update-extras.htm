<html>
<head>
<title>Test</title>
<style>
  span { 
    display:inline-block;
    vertical-align:middle;  
    border-radius:3px;
    background:gold;
    padding:2px 2em 2px 4px;
  }

  span::marker {
    margin:0 0 0 *;
    width:2em;
    height:*;
    background: url(stock:cross-x) no-repeat 50% 50%;
    background-size:0.5em;
    fill:red;
    cursor:pointer;
  }

</style>

<script>

const editor = document.$("plaintext");

let cnt = 0;

document.on("click","button#insert", function() {
  editor.state.focus = true;
  let sel = editor.selection;
  if(!sel.focusNode) {
    editor.execCommand("navigate:end");
    sel = editor.selection;
  }
  let caret;
  editor.plaintext.update(ctx => {
    ctx.insertHTML(sel.focusNode,sel.focusOffset,`<span>BC${++cnt}</span>`);
    caret = ctx.lastPosition;
    return true;
  });
  editor.selection.collapse(caret[0], caret[1]);
});

document.on("^mousedown","span", function(evt,span) {
  
  if(evt.target.tag == "::marker") { // click on ::marker pseudo-element
    editor.plaintext.update(ctx => {
      ctx.deleteNode(span);
      return true;
    });
    return true;
  }
});

document.on("click","button#get-text", function() {

  function gatherText(el) {
    let out = "";
    for(let node of el.childNodes) {
      switch(node.nodeType) {
        case 1: // element 
          out += "[" + gatherText(node) + "]"; 
          break; 
        case 3: // text node 
          out += node.data; 
          break; 
      }
    }
    return out;
  }

  let out = "";

  for(let textEl of editor.children) {
    let line = gatherText(textEl);
    out += line + "\r\n";
  }

  Window.this.modal(<info>{out}</info>)
  
});


</script>
</head>
<body>
  <button#insert>Insert inline block</button>
  <button#get-text>Show text</button>
  <plaintext>A</plaintext>    
</body>
</html>