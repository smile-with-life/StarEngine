<html>
    <head>
        <title>Test</title>
        <style>

#sidepanel {
  position:absolute;
  top:0;
  right:0;
  background: gold;
  padding:1em;
}

button.portal { foreground: no-repeat 50% 50%; fill:currentcolor;}
button.portal.up { foreground-image: url(icon:plus); }
button.portal.down { foreground-image: url(icon:minus); }


        </style>
        <script type="module">

import {createPortal} from "./portal.js";

class SidePanel extends Element {

  sidepanel = Element.create(<div #sidepanel />);

  componentDidMount() {
    document.append(this.sidepanel);
  }

  componentWillUnmount() {
    this.sidepanel.remove(); 
  }

  render(props,kids,parent) {
    return createPortal(parent, kids, this.sidepanel);
  }
}


class Main extends Element {

  counter = 0;

  ["on click at button.portal.up"]() { 
    this.componentUpdate({counter: this.counter + 1});
    return true;
  }
  ["on click at button.portal.down"]() {
    this.componentUpdate({counter: this.counter - 1});
    return true;
  }

  ["on change at input"] (evt,input){
    this.componentUpdate({counter: input.value}); 
  }

  render() {
    return <main> 
      <div> 
        counter: <input|integer value={this.counter} step="1"/> 
      </div>
      <SidePanel>
        <p>That is a "portal" element,<br/>
           rendered outside of host element.</p>
        <p>Counter: {this.counter} </p> 
        <button.portal.up/>
        <button.portal.down />
      </SidePanel>
    </main>;
  }
}

document.body.append(<Main />);
        </script>
    </head>
    <body>

     

    </body>
</html>